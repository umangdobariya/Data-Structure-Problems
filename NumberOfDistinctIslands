LeetCode
// 694. Number of Distinct Islands
// Medium

// 590

// 40

// Add to List

// Share
// Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

// Count the number of distinct islands. An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.

// Example 1:

// 11000
// 11000
// 00011
// 00011
// Given the above grid map, return 1.
// Example 2:

// 11011
// 10000
// 00001
// 11011
// Given the above grid map, return 3.

// Notice that:
// 11
// 1
// and
//  1
// 11
// are considered different island shapes, because we do not consider reflection / rotation.
// Note: The length of each dimension in the given grid does not exceed 50.



Solution:- 
------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int numDistinctIslands(int[][] grid) {
        // check if grid is null or length of grid is null or not;
        if(grid == null || grid.length == 0)
        {
            return 0;
        }
        
        //list of paths of the distinct islands
        Set<String> paths = new HashSet<>();
       
       // get the lengths of grid. 
        int m = grid.length;
        int n = grid[0].length;
      
      // traverse through the whole matrix;
        for(int i = 0; i< m; i++){
         for(int j = 0; j< n; j++){
             // check if the current pointer at the matrix is 1(land) or not
              if(grid[i][j] == 1)  {
                 // generate the path of the distinct isLand
                    String path = computePath(grid, i, j , m , n , "X");
                    paths.add(path);
                  }
         }   
        }
      return paths.size();
    }
    
    private String computePath(int[][] grid, int i , int j , int m , int n, String direction){
           
        if(i < 0|| j < 0 || i >= m || j >= n || grid[i][j] == 0)
            return "O";
            
        // change the value of land to water
         grid[i][j] = 0;
         
         String left =  computePath(grid, i, j-1, m, n , "L");
        String right =  computePath(grid, i, j+1, m, n , "R");
           String up =  computePath(grid, i-1, j, m, n , "U");
         String down =  computePath(grid, i+1, j, m, n , "D");
        return direction + left + right + up + down;
        
    }
}
-------------------------------------------------------------------------------------------------------------------------------
